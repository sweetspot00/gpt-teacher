// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-tvos12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FBSDKLoginKit
import FBSDKCoreKit
import FBSDKCoreKit_Basics
@_exported import FBSDKLoginKit
import Foundation
import Swift
import UIKit
import _Concurrency
@objcMembers @objc(FBSDKDeviceLoginCodeInfo) final public class DeviceLoginCodeInfo : ObjectiveC.NSObject {
  @objc final public let identifier: Swift.String
  @objc final public let loginCode: Swift.String
  @objc final public let verificationURL: Foundation.URL
  @objc final public let expirationDate: Foundation.Date
  @objc final public let pollingInterval: Swift.UInt
  @objc public init(identifier: Swift.String, loginCode: Swift.String, verificationURL: Foundation.URL, expirationDate: Foundation.Date, pollingInterval: Swift.UInt)
  @objc deinit
}
public struct DeviceLoginError : Foundation.CustomNSError, Swift.Hashable {
  public let errorCode: Swift.Int
  public let errorUserInfo: [Swift.String : Any]
  public init(_nsError nsError: Foundation.NSError)
  public init(_ code: FBSDKLoginKit.DeviceLoginError.Code, userInfo: [Swift.String : Any] = [:])
  public static var errorDomain: Swift.String {
    get
  }
  public typealias Code = FBSDKLoginKit.DeviceLoginErrorCode
  public static var excessivePolling: FBSDKLoginKit.DeviceLoginError.Code {
    get
  }
  public static var authorizationDeclined: FBSDKLoginKit.DeviceLoginError.Code {
    get
  }
  public static var authorizationPending: FBSDKLoginKit.DeviceLoginError.Code {
    get
  }
  public static var codeExpired: FBSDKLoginKit.DeviceLoginError.Code {
    get
  }
  public static func == (lhs: FBSDKLoginKit.DeviceLoginError, rhs: FBSDKLoginKit.DeviceLoginError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc(FBSDKDeviceLoginError) public enum DeviceLoginErrorCode : Swift.Int, @unchecked Swift.Sendable, Swift.Equatable {
  public typealias _ErrorType = FBSDKLoginKit.DeviceLoginError
  case excessivePolling = 1349172
  case authorizationDeclined = 1349173
  case authorizationPending = 1349174
  case codeExpired = 1349152
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(FBSDKDeviceLoginManager) final public class DeviceLoginManager : ObjectiveC.NSObject {
  @objc weak final public var delegate: FBSDKLoginKit.DeviceLoginManagerDelegate?
  @objc final public let permissions: [Swift.String]
  @objc final public var redirectURL: Foundation.URL?
  @objc(initWithPermissions:enableSmartLogin:) public init(permissions: [Swift.String], enableSmartLogin: Swift.Bool)
  @objc final public func start()
  @objc final public func cancel()
  @objc deinit
}
extension FBSDKLoginKit.DeviceLoginManager : Foundation.NetServiceDelegate {
  @objc final public func netService(_ service: Foundation.NetService, didNotPublish errorValues: [Swift.String : Foundation.NSNumber])
}
@objc(FBSDKDeviceLoginManagerDelegate) public protocol DeviceLoginManagerDelegate {
  @objc(deviceLoginManager:startedWithCodeInfo:) func deviceLoginManager(_ loginManager: FBSDKLoginKit.DeviceLoginManager, startedWith codeInfo: FBSDKLoginKit.DeviceLoginCodeInfo)
  @objc(deviceLoginManager:completedWithResult:error:) func deviceLoginManager(_ loginManager: FBSDKLoginKit.DeviceLoginManager, completedWith result: FBSDKLoginKit.DeviceLoginManagerResult?, error: Swift.Error?)
}
@objcMembers @objc(FBSDKDeviceLoginManagerResult) final public class DeviceLoginManagerResult : ObjectiveC.NSObject {
  @objc final public var accessToken: FBSDKCoreKit.AccessToken? {
    get
  }
  @objc final public var isCancelled: Swift.Bool {
    get
  }
  @objc public init(token: FBSDKCoreKit.AccessToken?, isCancelled cancelled: Swift.Bool)
  @objc deinit
}
public struct LoginError : Foundation.CustomNSError, Swift.Hashable {
  public let errorCode: Swift.Int
  public let errorUserInfo: [Swift.String : Any]
  public init(_nsError nsError: Foundation.NSError)
  public init(_ code: FBSDKLoginKit.LoginError.Code, userInfo: [Swift.String : Any] = [:])
  public static var errorDomain: Swift.String {
    get
  }
  public typealias Code = FBSDKLoginKit.LoginErrorCode
  public static var reserved: FBSDKLoginKit.LoginError.Code {
    get
  }
  public static var unknown: FBSDKLoginKit.LoginError.Code {
    get
  }
  public static var passwordChanged: FBSDKLoginKit.LoginError.Code {
    get
  }
  public static var userCheckpointed: FBSDKLoginKit.LoginError.Code {
    get
  }
  public static var userMismatch: FBSDKLoginKit.LoginError.Code {
    get
  }
  public static var unconfirmedUser: FBSDKLoginKit.LoginError.Code {
    get
  }
  public static var systemAccountAppDisabled: FBSDKLoginKit.LoginError.Code {
    get
  }
  public static var systemAccountUnavailable: FBSDKLoginKit.LoginError.Code {
    get
  }
  public static var badChallengeString: FBSDKLoginKit.LoginError.Code {
    get
  }
  public static var invalidIDToken: FBSDKLoginKit.LoginError.Code {
    get
  }
  public static var missingAccessToken: FBSDKLoginKit.LoginError.Code {
    get
  }
  public static func == (lhs: FBSDKLoginKit.LoginError, rhs: FBSDKLoginKit.LoginError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc(FBSDKLoginError) public enum LoginErrorCode : Swift.Int, @unchecked Swift.Sendable, Swift.Equatable {
  public typealias _ErrorType = FBSDKLoginKit.LoginError
  case reserved = 300
  case unknown
  case passwordChanged
  case userCheckpointed
  case userMismatch
  case unconfirmedUser
  case systemAccountAppDisabled
  case systemAccountUnavailable
  case badChallengeString
  case invalidIDToken
  case missingAccessToken
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public let LoginErrorDomain: Swift.String
extension FBSDKLoginKit.DeviceLoginErrorCode : Swift.Hashable {}
extension FBSDKLoginKit.DeviceLoginErrorCode : Swift.RawRepresentable {}
extension FBSDKLoginKit.LoginErrorCode : Swift.Hashable {}
extension FBSDKLoginKit.LoginErrorCode : Swift.RawRepresentable {}
